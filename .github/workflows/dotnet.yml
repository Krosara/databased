name: .NET

on:
  push:
    branches: 
    - main
  pull_request:
    branches:
    - develop
    paths-ignore:
    - './src/Databased.Shared'

jobs:
  build-assets-service:
    name: Build Assets Microservice
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: cd src/Assets.Service; dotnet restore
    - name: Build
      run: cd src/Assets.Service; dotnet build --no-restore
  build-requests-service:
    name: Build Requests Microservice
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: cd src/Requests.Service; dotnet restore
    - name: Build
      run: cd src/Requests.Service; dotnet build --no-restore
  build-api-gateway:
    name: Build API Gateway
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: cd src/Api.Gateway; dotnet restore
    - name: Build
      run: cd src/Api.Gateway; dotnet build --no-restore

  test-assets-service:
    name: Test Assets Microservice
    needs: build-assets-service
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: cd src/Assets.Service; dotnet restore
    - name: Test
      run: cd src/Assets.Service; dotnet test --verbosity normal
      
  test-requests-service:
    name: Test Requests Microservice
    needs: build-requests-service
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: cd src/Requests.Service; dotnet restore
    - name: Test
      run: cd src/Requests.Service; dotnet test --verbosity normal
      
  sc-assets-service:
    name: SonarCloud Assets Microservice
    needs: test-assets-service
    runs-on: windows-latest
    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\src\Assets.Service\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        cd src\Assets.Service
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .sonar\scanner
    - name: Analyze
      env:
        SONAR_TOKEN_ASSETS: ${{ secrets.SONAR_TOKEN_ASSETS }}
      shell: powershell
      run: |
        cd src\Assets.Service
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"databased_assets_service" /o:"krosara" /d:sonar.login="${{ secrets.SONAR_TOKEN_ASSETS }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-incremental
        .sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN_ASSETS }}"
      
  sc-requests-service:
    name: SonarCloud Requests Microservice
    needs: test-requests-service
    runs-on: windows-latest
    steps:
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: actions/checkout@v3
      with: 
        fetch-depth: 0
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\src\Requests.Service\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        cd src\Requests.Service
        New-Item -Path .sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .sonar\scanner
    - name: Analyze
      env:
        SONAR_TOKEN_REQUESTS: ${{ secrets.SONAR_TOKEN_REQUESTS }}
      shell: powershell
      run: |
        cd src\Requests.Service
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"databased_requests_service" /o:"krosara" /d:sonar.login="${{ secrets.SONAR_TOKEN_REQUESTS }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-incremental
        .sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN_REQUESTS }}"
      
  deploy-assets-service:
    name: Deploy Assets Microservice
    needs: sc-assets-service
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET }}
          aws-region: eu-north-1
      -
        name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Build and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: databased-assets-service
          IMAGE_TAG: latest
        run: |
          cd src/Assets.Service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-requests-service:
    name: Deploy Requests Microservice
    needs: sc-requests-service
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET }}
          aws-region: eu-north-1
      -
        name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Build and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: databased-requests-service
          IMAGE_TAG: latest
        run: |
          cd src/Requests.Service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      
